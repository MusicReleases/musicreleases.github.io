@using JakubKastner.MusicReleases.Base;
@using JakubKastner.SpotifyApi.Controllers;
@using JakubKastner.SpotifyApi.Objects;

@inject ControllerUser _spotifyControllerUser;
@inject ControllerArtist _spotifyControllerArtist;

<div class="menu artists items scroll buttons-rounded-m">
	@if (!_spotifyControllerUser.IsLoggedIn())
	{
		<p>User not logged in</p>
		<button @onclick=UpdateArtists>Update</button>
	}
	else
	{
		@if (_artists == null)
		{
			<p>Loading artists...</p>
		}
		else if (_artists.Count < 1)
		{
			<p>0 artists</p>
			<button @onclick=UpdateArtists>Update</button>
		}
		else
		{
			@foreach (var artist in _artists)
			{
				<ButtonArtist ArtistId=@artist.Id ArtistName=@artist.Name></ButtonArtist>
			}
		}
	}
</div>

@code
{
	[Parameter]
	public Enums.ServiceType ServiceType { get; set; }

	private SortedSet<SpotifyApi.Objects.Artist>? _artists;

	protected override async Task OnInitializedAsync()
	{
		if (ServiceType == Enums.ServiceType.Spotify)
		{
			// TODO show loader
			// display playlists
			if (!_spotifyControllerUser.IsLoggedIn()) return;

			_artists = await _spotifyControllerArtist.GetUserFollowedArtists();
		}
	}

	private async Task UpdateArtists()
	{
		_artists = await _spotifyControllerArtist.GetUserFollowedArtists();
		StateHasChanged();
	}
}

@inherits FluxorComponent;

@using Fluxor;
@using Fluxor.Blazor.Web.Components;
@using JakubKastner.MusicReleases.Base;
@using JakubKastner.MusicReleases.Store.Api.Spotify.Artists;
@using JakubKastner.SpotifyApi.Controllers;
@using JakubKastner.SpotifyApi.Objects;

@inject IDispatcher _dispatcher;
@inject IState<SpotifyArtistsState> _stateSpotifyArtists;
@inject ControllerUser _spotifyControllerUser;

<div class="menu artists items scroll buttons-rounded-m">
	@if (!_spotifyControllerUser.IsLoggedIn())
	{
		<p>User not logged in</p>
		<button @onclick=LoadArtists>Update</button>
	}
	else
	{
		@if (_loading || _artists == null)
		{
			<p>Loading artists...</p>
		}
		else if (_artists.Count < 1)
		{
			<p>0 artists</p>
			<button @onclick=LoadArtists>Update</button>
		}
		else
		{
			@foreach (var artist in _artists)
			{
				<ButtonArtist ArtistId=@artist.Id ArtistName=@artist.Name></ButtonArtist>
			}
		}
	}
</div>

@code
{
	[Parameter]
	public Enums.ServiceType ServiceType { get; set; }

	private SortedSet<Artist>? _artists => _stateSpotifyArtists.Value.Artists;
	private bool _loading => _stateSpotifyArtists.Value.Loading;

	protected override void OnInitialized()
	{
		if (ServiceType == Enums.ServiceType.Spotify)
		{
			if (!_spotifyControllerUser.IsLoggedIn())
			{
				return;
			}

			if (_stateSpotifyArtists.Value.Initialized == false)
			{
				LoadArtists();
				_dispatcher.Dispatch(new SpotifyArtistsActionInitialized());
				base.OnInitialized();
			}
		}
	}

	private void LoadArtists()
	{
		_dispatcher.Dispatch(new SpotifyArtistsActionLoad());
	}
}

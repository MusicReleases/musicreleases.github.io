@using JakubKastner.MusicReleases.Services.ApiServices
@using JakubKastner.MusicReleases.Services.ApiServices.SpotifyServices
@using JakubKastner.MusicReleases.Services.BaseServices
@using JakubKastner.MusicReleases.Web.Components.LoggedIn.Menus.Header
@using JakubKastner.MusicReleases.Web.Components.LoggedIn.Menus.Header.Buttons
@using static JakubKastner.MusicReleases.Base.Enums

@implements IDisposable

@inject IApiLoginService ApiLoginService
@inject ISpotifyFilterService SpotifyFilterService
@inject ILoaderService LoaderService

<div class="menu artists items scroll buttons-rounded-m @Class">

	<Artists class="hide-pc hide-tablet">
	</Artists>

	@if (!ApiLoginService.IsUserLoggedIn())
	{
		<p>User not logged in</p>
	}

	else
	{
		if (Loading || Artists is null)
		{
			<p>Loading artists...</p>
		}
		@* else if (Error)
		{
			<p>Failed to get artists</p>
			<ButtonUpdate Type="MenuButtonsType.Artists">
				Update
			</ButtonUpdate>
		} *@
		else if (Artists.Count < 1)
		{
			<p>0 artists</p>
			<ButtonUpdate Type="MenuButtonsType.Artists">
				Update
			</ButtonUpdate>
		}
		else
		{
			<Virtualize Items="@Artists" Context="artist">
				<ButtonArtist ArtistId=@artist.Id ArtistName=@artist.Name>
				</ButtonArtist>
			</Virtualize>
		}
	}
</div>
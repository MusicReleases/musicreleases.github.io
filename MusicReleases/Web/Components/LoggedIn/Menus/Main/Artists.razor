@using JakubKastner.MusicReleases.Base;
@using JakubKastner.MusicReleases.Web.Components.LoggedIn.Menus.Main.Buttons
@using JakubKastner.SpotifyApi.Objects
@inject NavigationManager NavManager
@inject JakubKastner.SpotifyApi.Controllers.ControllerUser controllerUser
@inject JakubKastner.SpotifyApi.Controllers.ControllerArtist controllerArtist

<div class="menu artists items scroll buttons-rounded-m">
    @if (!controllerUser.IsLoggedIn())
    {
        <p>User not logged in</p>
        <button @onclick=UpdateArtists>Update</button>
    }
    else
    {
        @if (_artists == null)
        {
            <p>Loading artists...</p>
        }
        else if (_artists.Count < 1)
        {
            <p>0 artists</p>
            <button @onclick=UpdateArtists>Update</button>
        }
        else
        {
            @foreach (var artist in _artists)
            {
                <Artist ArtistId=@artist.Id ArtistName=@artist.Name></Artist>
            }
        }
    }
</div>

@code
{
    [Parameter]
    public Enums.ServiceType ServiceType { get; set; }

    private SortedSet<SpotifyApi.Objects.Artist>? _artists;

    protected override async Task OnInitializedAsync()
    {
        if (ServiceType == Enums.ServiceType.Spotify)
        {
            // TODO show loader
            // display playlists
            if (!controllerUser.IsLoggedIn()) return;

            _artists = await controllerArtist.GetUserFollowedArtists();
        }
    }

    private async Task UpdateArtists()
    {
        _artists = await controllerArtist.GetUserFollowedArtists();
        StateHasChanged();
    }
}

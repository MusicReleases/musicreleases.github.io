@using MusicReleases;
@using MusicReleases.Api.Spotify.Objects
@inject NavigationManager NavManager

<div class="menu playlists items scroll">
    @if (Api.Spotify.Main.User == null)
    {
        <p>User not logged in</p>
        <button @onclick=UpdatePlaylists>Update</button>
    }
    else
    {
        @if (_playlists == null)
        {
            <p>Loading playlists...</p>
        }
        else if (_playlists.Count < 1)
        {
            <p>0 playlists</p>
            <button @onclick=UpdatePlaylists>Update</button>
        }
        else
        {
            @foreach (var playlist in _playlists)
            {
                <button class="playlist" data-menu_type="playlist" data-menu_artist="playlist-id-@playlist.Id">@playlist.Name</button>
            }
        }
    }
</div>

@code {

    [Parameter]
    public Enums.Login Type { get; set; }

    private HashSet<Playlist> _playlists;

    protected override async Task OnInitializedAsync()
    {
        if (Type == Enums.Login.Spotify)
        {
            // TODO show loader
            // display playlists
            if (Api.Spotify.Main.User == null) return;

            _playlists = await Api.Spotify.Main.User.GetPlaylists();
        }
    }

    private async Task UpdatePlaylists()
    {
        _playlists = await Api.Spotify.Controller.GetPlaylists();
        StateHasChanged();
    }
}

@using Fluxor;
@using Fluxor.Blazor.Web.Components;
@using JakubKastner.MusicReleases.Base;
@using JakubKastner.MusicReleases;
@using JakubKastner.MusicReleases.Controllers.ApiControllers
@using JakubKastner.MusicReleases.Controllers.BaseControllers;
@using JakubKastner.MusicReleases.Store.ApiStore.SpotifyStore.SpotifyPlaylistsStore;
@using JakubKastner.MusicReleases.Store.LoaderStore;
@using JakubKastner.SpotifyApi.Controllers;
@using JakubKastner.SpotifyApi.Objects;

@inherits FluxorComponent;

@inject IDispatcher _dispatcher;
@inject IState<SpotifyPlaylistsState> _stateSpotifyPlaylists;
@inject ISpotifyControllerUser _spotifyControllerUser;
@inject IBaseLoginController _baseLoginController;

<div class="menu playlists items scroll buttons-rounded-m">
	@if (!_baseLoginController.IsUserLoggedIn())
	{
		<p>User not logged in</p>
		<button @onclick=LoadPlaylists>
			Update
		</button>
	}
	else
	{
		@if (_loading || _playlists == null)
		{
			<p>Loading playlists...</p>
		}
		else if (_playlists.Count < 1)
		{
			<p>0 playlists</p>
			<button @onclick=LoadPlaylists>
				Update
			</button>
		}
		else
		{
			@foreach (var playlist in _playlists)
			{
				<ButtonPlaylist PlaylistId=@playlist.Id PlaylistName=@playlist.Name></ButtonPlaylist>
			}
		}
	}
</div>
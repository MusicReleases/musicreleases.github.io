@using Fluxor;
@using Fluxor.Blazor.Web.Components;
@using JakubKastner.MusicReleases.Base;
@using JakubKastner.MusicReleases;
@using JakubKastner.MusicReleases.Store.Api.Spotify.Playlists;
@using JakubKastner.MusicReleases.Store.Releases;
@using JakubKastner.SpotifyApi.Controllers;
@using JakubKastner.SpotifyApi.Objects;

@inherits FluxorComponent;

@inject IDispatcher _dispatcher;
@inject IState<SpotifyPlaylistsState> _stateSpotifyPlaylists;
@inject ISpotifyControllerUser _spotifyControllerUser;

<div class="menu playlists items scroll buttons-rounded-m">
	@if (!_spotifyControllerUser.IsLoggedIn())
	{
		<p>User not logged in</p>
		<button @onclick=LoadPlaylists>Update</button>
	}
	else
	{
		@if (_loading || _playlists == null)
		{
			<p>Loading playlists...</p>
		}
		else if (_playlists.Count < 1)
		{
			<p>0 playlists</p>
			<button @onclick=LoadPlaylists>Update</button>
		}
		else
		{
			@foreach (var playlist in _playlists)
			{
				<ButtonPlaylist PlaylistId=@playlist.Id PlaylistName=@playlist.Name></ButtonPlaylist>
			}
		}
	}
</div>

@code
{
	[Parameter]
	public Enums.ServiceType ServiceType { get; set; }

	private SortedSet<SpotifyPlaylist>? _playlists => _stateSpotifyPlaylists.Value.Playlists;
	private bool _loading => _stateSpotifyPlaylists.Value.Loading;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (ServiceType == Enums.ServiceType.Spotify)
		{

			if (!_spotifyControllerUser.IsLoggedIn())
			{
				return;
			}

			if (_stateSpotifyPlaylists.Value.Initialized == false)
			{
				LoadPlaylists();
				_dispatcher.Dispatch(new SpotifyPlaylistsActionInitialized());
			}
		}
	}

	private void LoadPlaylists()
	{
		_dispatcher.Dispatch(new SpotifyPlaylistsActionLoad());
	}
}

@page "/releases/{type?}"
@layout LayoutMain

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using JakubKastner.MusicReleases.Controllers.ApiControllers
@using JakubKastner.MusicReleases.Controllers.ApiControllers.SpotifyControllers
@using JakubKastner.MusicReleases.Store.ApiStore.SpotifyStore.SpotifyArtistsStore
@using JakubKastner.MusicReleases.Store.ApiStore.SpotifyStore.SpotifyReleasesStore
@using JakubKastner.MusicReleases.Store.LoaderStore
@using JakubKastner.MusicReleases.Web.Components.InfiniteScrolling
@using JakubKastner.MusicReleases.Web.Components.LoggedIn.Releases
@using JakubKastner.SpotifyApi
@using JakubKastner.SpotifyApi.Controllers
@using JakubKastner.SpotifyApi.Objects
@using static JakubKastner.SpotifyApi.Base.SpotifyEnums

@inherits FluxorComponent

@inject ISpotifyWorkflowController _spotifyWorkflowController

@* @inject IDispatcher _dispatcher *@
@inject IState<SpotifyReleasesState> _stateSpotifyReleases
@* @inject IState<SpotifyArtistsState> _stateSpotifyArtists  *@

@inject NavigationManager _navManager
@inject IApiLoginController _apiLoginController

<p>Releases TODO</p>

@* <button type="button" @onclick="SaveToStorage">
	save
</button>

@if (_loading || _releases is null)
{
	<p>Loading releases...</p>
}
else if (_releases.Count < 1)
{
	<p>0 releases</p>
	<button @onclick=LoadReleases>Update</button>
}
else
{
	<div class="releases boxes">

		<InfiniteScrolling ItemsProvider="GetReleases">
			<ItemTemplate Context="release">
				<Release SpotifyRelease="@release" />
			</ItemTemplate>
			<LoadingTemplate>
				<div>Loading more @Type...</div>
			</LoadingTemplate>
		</InfiniteScrolling>
	</div>
} *@
@page "/releases/{type?}";
@layout LayoutMain;

@using Fluxor;
@using Fluxor.Blazor.Web.Components;
@using JakubKastner.MusicReleases.Store.Api.Spotify.Artists;
@using JakubKastner.MusicReleases.Store.Releases;
@using JakubKastner.MusicReleases.Web.Components.InfiniteScrolling
@using JakubKastner.MusicReleases.Web.Components.LoggedIn.Releases
@using JakubKastner.SpotifyApi;
@using JakubKastner.SpotifyApi.Objects;
@using static JakubKastner.SpotifyApi.SpotifyEnums;
@using JakubKastner.MusicReleases.Store.Api.Spotify.Releases;

@inherits FluxorComponent;

@inject IDispatcher _dispatcher;
@inject IState<SpotifyReleasesState> _stateSpotifyReleases;
@inject IState<SpotifyArtistsState> _stateSpotifyArtists;
@inject NavigationManager _navManager;
@inject JakubKastner.SpotifyApi.Controllers.SpotifyControllerUser _spotifyControllerUser;

<button type="button" @onclick="Loader">
	start
</button>
<button type="button" @onclick="LoaderS">
	stop
</button>
<button type="button" @onclick="SaveToStorage">
	save
</button>

@if (!_spotifyControllerUser.IsLoggedIn())
{
	<p>User not logged in</p>
	<button @onclick=LoadReleases>Update</button>
}
else
{
	@if (_loading || _releases == null)
	{
		<p>Loading releases...</p>
	}
	else if (_releases.Count < 1)
	{
		<p>0 releases</p>
		<button @onclick=LoadReleases>Update</button>
	}
	else
	{
		<div class="releases boxes">

			<InfiniteScrolling ItemsProvider="GetReleases">
				<ItemTemplate Context="release">
					<Release ReleaseObj="@release" />
				</ItemTemplate>
				<LoadingTemplate>
					<div>Loading more @Type...</div>
				</LoadingTemplate>
			</InfiniteScrolling>
		</div>
	}
}

@code
{
	[Parameter]
	public string? Type { get; set; }

	// TODO enable to select and display more than 1 release type
	private ReleaseType _type;

	private SortedSet<SpotifyAlbum>? _releases => _stateSpotifyReleases.Value.Releases;
	private bool _loading => _stateSpotifyReleases.Value.Loading;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (!_spotifyControllerUser.IsLoggedIn())
		{
			_navManager.NavigateTo("");
			return;
		}

		// TODO https://stackoverflow.com/questions/54345380/executing-method-on-parameter-change
		//GetParameter();

		if (_stateSpotifyReleases.Value.Initialized == false)
		{
			LoadReleases();
			_dispatcher.Dispatch(new SpotifyReleasesActionInitialized());
		}
	}

	private async Task<IEnumerable<SpotifyAlbum>> GetReleases(InfiniteScrollingItemsProviderRequest request)
	{
		await Task.Delay(0);
		if (_releases == null)
		{
			return new SortedSet<SpotifyAlbum>();
		}
		return _releases.Skip(request.StartIndex).Take(15);
	}

	private void LoadReleases()
	{
		_dispatcher.Dispatch(new SpotifyReleasesActionLoad());
	}

	private void Loader()
	{
		_dispatcher.Dispatch(new LoaderAction(true));
	}
	private void LoaderS()
	{
		_dispatcher.Dispatch(new LoaderAction(false));
	}

	private void SaveToStorage()
	{
		_dispatcher.Dispatch(new SpotifyArtistsActionStorageSet(_stateSpotifyArtists.Value));
	}
	protected override void OnParametersSet()
	{
		GetParameter();
	}

	private void GetParameter()
	{
		if (string.IsNullOrEmpty(Type))
		{
			// TODO display all releases and remember last selection
			//navManager.NavigateTo("/releases/albums");
			// TODO if is return here, code doesnt refresh the content
			// TODO but if is not here, code just continue and doesnt get the right Type (for example)
			return;
		}
		try
		{
			_type = Enum.Parse<ReleaseType>(Type);
		}
		catch
		{
			_type = ReleaseType.Albums;
		}
	}
}
@page "/releases/{type?}";
@layout LayoutMain;

@using Fluxor;
@using Fluxor.Blazor.Web.Components;
@using JakubKastner.MusicReleases.Store.Releases;
@using JakubKastner.MusicReleases.Web.Components.LoggedIn.Releases
@using JakubKastner.SpotifyApi;
@using JakubKastner.SpotifyApi.Objects;
@using static JakubKastner.SpotifyApi.SpotifyEnums;
@using JakubKastner.MusicReleases.Store.Api.Spotify.Releases;

@inherits FluxorComponent;

@inject IDispatcher _dispatcher;
@inject IState<SpotifyReleasesState> _stateSpotifyReleases;
@inject NavigationManager _navManager;
@inject JakubKastner.SpotifyApi.Controllers.ControllerUser _spotifyControllerUser;
@*@inject LoaderService loader*@

@if (!_spotifyControllerUser.IsLoggedIn())
{
	<p>User not logged in</p>
	<button @onclick=LoadReleases>Update</button>
}
else
{
	@if (_loading || _releases == null)
	{
		<p>Loading releases...</p>
	}
	else if (_releases.Count < 1)
	{
		<p>0 releases</p>
		<button @onclick=LoadReleases>Update</button>
	}
	else
	{
		<div class="releases boxes">
			<Virtualize Items="@_releases" Context="release" ItemSize="233" OverscanCount="4">
				<ItemContent>
					<Release ReleaseObj="@release" />
				</ItemContent>
				<Placeholder>
					<p>Loading</p>
				</Placeholder>
			</Virtualize>
		</div>
	}
}

<button type="button" @onclick="Loader">
	start
</button>
<button type="button" @onclick="LoaderS">
	stop
</button>



@code
{
	[Parameter]
	public string? Type { get; set; }

	// TODO enable to select and display more than 1 release type
	private ReleaseType _type;

	private SortedSet<Album>? _releases => _stateSpotifyReleases.Value.Releases;
	private bool _loading => _stateSpotifyReleases.Value.Loading;

	protected override void OnInitialized()
	{
		if (!_spotifyControllerUser.IsLoggedIn())
		{
			_navManager.NavigateTo("");
		}

		// TODO https://stackoverflow.com/questions/54345380/executing-method-on-parameter-change
		//GetParameter();

		if (_stateSpotifyReleases.Value.Initialized == false)
		{
			LoadReleases();
			_dispatcher.Dispatch(new SpotifyReleasesActionInitialized());
			base.OnInitialized();
		}
	}

	private void LoadReleases()
	{
		_dispatcher.Dispatch(new SpotifyReleasesActionLoad());
	}

	private void Loader()
	{
	_dispatcher.Dispatch(new LoaderAction(true));
	}
	private void LoaderS()
	{
	_dispatcher.Dispatch(new LoaderAction(false));
	}

	protected override void OnParametersSet()
	{
		GetParameter();
	}

	private void GetParameter()
	{
		if (string.IsNullOrEmpty(Type))
		{
			// TODO display all releases and remember last selection
			//navManager.NavigateTo("/releases/albums");
			// TODO if is return here, code doesnt refresh the content
			// TODO but if is not here, code just continue and doesnt get the right Type (for example)
			return;
		}
		try
		{
			_type = Enum.Parse<ReleaseType>(Type);
		}
		catch
		{
			_type = ReleaseType.Albums;
		}
	}
}
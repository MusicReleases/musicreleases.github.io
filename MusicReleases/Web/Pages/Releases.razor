@page "/releases/{type?}"
@using JakubKastner.SpotifyApi
@using JakubKastner.SpotifyApi.Objects
@using JakubKastner.MusicReleases.Web.Objects
@using static JakubKastner.SpotifyApi.Enums
@layout LayoutMain
@inject NavigationManager navManager
@inject LoaderService loader

@inject JakubKastner.SpotifyApi.Controllers.ControllerUser controllerUser

<p>Loading releases...</p>

<button type="button" @onclick="GetReleases">
    Get releases
</button>
<div class="releases boxes">
    <Virtualize Items="@_albums" Context="release" ItemSize="233" OverscanCount="4">
        <ItemContent>
            <JakubKastner.MusicReleases.Web.Components.LoggedIn.Releases.Release ReleaseObj="@release" />
        </ItemContent>
        <Placeholder>
            <p>Loading</p>
        </Placeholder>
    </Virtualize>
</div>


@code
{
    [Parameter]
    public string? Type { get; set; }

    // TODO enable to select and display more than 1 release type
    private ReleaseType _type;

    private SortedSet<Album> _albums = new();

    // <DynamicComponent Type=""></DynamicComponent>
    protected override async Task OnInitializedAsync()
    {
        if (!controllerUser.IsLoggedIn())
        {
            navManager.NavigateTo("");
        }
        if (string.IsNullOrEmpty(Type))
        {
            // TODO display all releases and remember last selection
            //navManager.NavigateTo("/releases/albums");
            // TODO if is return here, code doesnt refresh the content
            // TODO but if is not here, code just continue and doesnt get the right Type (for example)
            return;
        }

        try
        {
            _type = Enum.Parse<ReleaseType>(Type);
        }
        catch
        {
            _type = ReleaseType.Albums;
        }

        // TODO loading artists two times???
        // display playlists
        /*if (Api.Spotify.Main.User == null) return;

        var artists = await Api.Spotify.Main.User.GetArtists();*/
    }

    private async Task GetReleases()
    {
        loader.Start();
        _albums = await controllerUser.GetReleases();
        loader.Stop();
    }
}
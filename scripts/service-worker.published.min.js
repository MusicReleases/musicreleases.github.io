async function onInstall(){console.info("Service worker: Install");const n=self.assetsManifest.assets.filter(n=>offlineAssetsInclude.some(t=>t.test(n.url))).filter(n=>!offlineAssetsExclude.some(t=>t.test(n.url))).map(n=>new Request(n.url,{integrity:n.hash,cache:"no-cache"}));await caches.open(cacheName).then(t=>t.addAll(n))}async function onActivate(){console.info("Service worker: Activate");const n=await caches.keys();await Promise.all(n.filter(n=>n.startsWith(cacheNamePrefix)&&n!==cacheName).map(n=>caches.delete(n)))}async function onFetch(n){let t=null;if(n.request.method==="GET"){const i=n.request.mode==="navigate",r=i?"index.html":n.request,u=await caches.open(cacheName);t=await u.match(r)}return t||fetch(n.request)}self.importScripts("./service-worker-assets.js");self.addEventListener("install",n=>n.waitUntil(onInstall(n)));self.addEventListener("activate",n=>n.waitUntil(onActivate(n)));self.addEventListener("fetch",n=>n.respondWith(onFetch(n)));const cacheNamePrefix="offline-cache-",cacheName=`${cacheNamePrefix}${self.assetsManifest.version}`,offlineAssetsInclude=[/\.dll$/,/\.pdb$/,/\.wasm/,/\.html/,/\.js$/,/\.json$/,/\.css$/,/\.woff$/,/\.png$/,/\.jpe?g$/,/\.gif$/,/\.ico$/,/\.blat$/,/\.dat$/],offlineAssetsExclude=[/^service-worker\.js$/];